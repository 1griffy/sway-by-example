// metadata
export const version = "0.8.13"
export const title = "Initialization"
export const description = "Local, state and global variables"
export const codes = [
    {
        fileName: "forc",
        code: "W3Byb2plY3RdCmF1dGhvcnMgPSBbIkNhbGwgRGVsZWdhdGlvbiJdCmVudHJ5ID0gIm1haW4uc3ciCmxpY2Vuc2UgPSAiQXBhY2hlLTIuMCIKbmFtZSA9ICJpbml0aWFsaXphdGlvbiIKCiMgVGhlIHZhbHVlcyBiZWxvdyBhcmUgdGhlIGZpcnN0IGFkZHJlc3MgZ2VuZXJhdGVkIGJ5IHRoZSBGdWVsIFNESyBmb3IgdGVzdHMuIFRoZXkgYXJlIHRoZSBzYW1lIGV2ZXJ5dGltZQpbY29uc3RhbnRzXQpvd25lciA9IHsgdHlwZSA9ICJiMjU2IiwgdmFsdWUgPSAiMHgxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExIiB9CgpbZGVwZW5kZW5jaWVzXQo=",
    },
    {
        fileName: "initialization",
        code: "Y29udHJhY3Q7CgpkZXAgbGliOwpkZXAgZXJyb3JzOwoKdXNlIGxpYjo6KjsKdXNlIGVycm9yczo6KjsKdXNlIHN0ZDo6ewogICAgaWRlbnRpdHk6OklkZW50aXR5LAogICAgY29uc3RhbnRzOjpaRVJPX0IyNTYsCn07CgphYmkgSW5pdGlhbGl6YXRpb24gewogICAgI1tzdG9yYWdlKHdyaXRlKV0KICAgIGZuIHRyYW5zZmVyX293bmVyc2hpcChuZXdfb3duZXI6IElkZW50aXR5KTsKCiAgICAjW3N0b3JhZ2UocmVhZCldCiAgICBmbiBvd25lcigpIC0+IElkZW50aXR5Owp9CgpzdG9yYWdlIHsKICAgIG93bmVyOiBJZGVudGl0eSA9IElkZW50aXR5OjpBZGRyZXNzKEFkZHJlc3MgewogICAgICAgIC8vIG93bmVyIGluaXRpYWxpemVkIGluIEZvcmMudG9tbAogICAgICAgIHZhbHVlOiBvd25lciwKICAgIH0pCn0KCmltcGwgSW5pdGlhbGl6YXRpb24gZm9yIENvbnRyYWN0IHsKICAgICNbc3RvcmFnZSh3cml0ZSldCiAgICBmbiB0cmFuc2Zlcl9vd25lcnNoaXAobmV3X293bmVyOiBJZGVudGl0eSkgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIG5ld19vd25lciAhPSBJZGVudGl0eTo6QWRkcmVzcyhBZGRyZXNzIHt2YWx1ZTogWkVST19CMjU2fSksIAogICAgICAgICAgICBPd25lckVycm9yOjpOZXdPd25lckNhbm5vdEJlWmVyb0FkZHJlc3MKICAgICAgICApOwogICAgICAgIHN0b3JhZ2Uub3duZXIgPSBuZXdfb3duZXIKICAgIH0KCiAgICAjW3N0b3JhZ2UocmVhZCldCiAgICBmbiBvd25lcigpIC0+IElkZW50aXR5IHsKICAgICAgICBzdG9yYWdlLm93bmVyCiAgICB9Cn0K",
    },
    {
        fileName: "old_initialization",
        code: "Y29udHJhY3Q7CgouLi4KCnN0b3JhZ2UgewogICAgc3RhdGU6IFN0YXRlID0gU3RhdGU6Ok5vdEluaXRpYWxpemVkLAogICAgYmxvY2tjaGFpbl90eXBlOiBzdHJbMTFdID0gIm1vbm9saXRoaWMhIiwKfQoKaW1wbCBJbml0aWFsaXphdGlvbiBmb3IgQ29udHJhY3QgewogICAgI1tzdG9yYWdlKHJlYWQsIHdyaXRlKV0KICAgIGZuIGluaXRpYWxpemUoKSB7CiAgICAgICAgLy8gU2V0cyB0aGUgc3RhdGUgb2YgdGhlIGNvbnRyYWN0IHRvIGJlIGluaXRhbGl6ZWQKICAgICAgICByZXF1aXJlKHN0b3JhZ2Uuc3RhdGUgPT0gU3RhdGU6Ok5vdEluaXRpYWxpemVkLCBJbml0aWFsaXphdGlvbkVycm9yOjpDYW5ub3RSZWluaXRpYWxpemUpOwogICAgICAgIHN0b3JhZ2Uuc3RhdGUgPSBTdGF0ZTo6SW5pdGlhbGl6ZWQ7CiAgICB9CgogICAgI1tzdG9yYWdlKHJlYWQsIHdyaXRlKV0KICAgIGZuIHVwZ3JhZGVfYmxvY2tjaGFpbigpIHsKICAgICAgICAvLyBGdW5jdGlvbnMgZW5zdXJpbmcgdGhlIGNvbnRyYWN0IGhhcyBiZWVuIGluaXRhbGl6ZWQKICAgICAgICByZXF1aXJlKHN0b3JhZ2Uuc3RhdGUgPT0gU3RhdGU6OkluaXRpYWxpemVkLCBJbml0aWFsaXphdGlvbkVycm9yOjpDb250cmFjdE5vdEluaXRpYWxpemVkKTsKICAgICAgICBzdG9yYWdlLmJsb2NrY2hhaW5fdHlwZSA9ICIqKm1vZHVsYXIqKiIKICAgIH0KCiAgICAjW3N0b3JhZ2UocmVhZCldCiAgICBmbiBibG9ja2NoYWluKCkgLT4gc3RyWzExXSB7CiAgICAgICAgc3RvcmFnZS5ibG9ja2NoYWluX3R5cGUKICAgIH0KfQo=",
    },
]

const html = `<p>There are no <code>constructors</code> in Sway so initializations are done slightly differently. Predetermined variables can be declared under <code>constants</code> in <code>forc.toml</code>. Upon compile time variables will be initalized and can be passed into the contract&#39;s storage.</p>
<p><code>forc.toml</code></p>
<pre><code class="language-rust">[project]
authors = [<span class="hljs-string">"Call Delegation"</span>]
entry = <span class="hljs-string">"main.sw"</span>
license = <span class="hljs-string">"Apache-2.0"</span>
name = <span class="hljs-string">"initialization"</span>

# The values below are the first address generated by the Fuel SDK <span class="hljs-keyword">for</span> <span class="hljs-title class_">tests</span>. They are the same everytime
[constants]
owner = { <span class="hljs-keyword">type</span> = <span class="hljs-string">"b256"</span>, value = <span class="hljs-string">"0x1111111111111111111111111111111111111111111111111111111111111111"</span> }

[dependencies]
</code></pre>
<p><code>main.sw</code></p>
<pre><code class="language-rust">contract;

dep lib;
dep errors;

<span class="hljs-keyword">use</span> lib::*;
<span class="hljs-keyword">use</span> errors::*;
<span class="hljs-keyword">use</span> std::{
    identity::Identity,
    constants::ZERO_B256,
};

abi Initialization {
    <span class="hljs-meta">#[storage(write)]</span>
    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">transfer_ownership</span>(new_owner: Identity);

    <span class="hljs-meta">#[storage(read)]</span>
    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">owner</span>() <span class="hljs-punctuation">-&gt;</span> Identity;
}

storage {
    owner: Identity = Identity::<span class="hljs-title function_ invoke__">Address</span>(Address {
        <span class="hljs-comment">// owner initialized in Forc.toml</span>
        value: owner,
    })
}

<span class="hljs-keyword">impl</span> <span class="hljs-title class_">Initialization</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Contract</span> {
    <span class="hljs-meta">#[storage(write)]</span>
    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">transfer_ownership</span>(new_owner: Identity) {
        <span class="hljs-title function_ invoke__">require</span>(
            new_owner != Identity::<span class="hljs-title function_ invoke__">Address</span>(Address {value: ZERO_B256}), 
            OwnerError::NewOwnerCannotBeZeroAddress
        );
        storage.owner = new_owner
    }

    <span class="hljs-meta">#[storage(read)]</span>
    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">owner</span>() <span class="hljs-punctuation">-&gt;</span> Identity {
        storage.owner
    }
}
</code></pre>
<p>Another different approach is to keep track of an <code>initialization state</code> by creating your own constructor. Initialization can then be enforced by requiring subsequent related functions to check if the state has been initalized.</p>
<p><code>main.sw</code></p>
<pre><code class="language-rust">contract;

...

storage {
    state: State = State::NotInitialized,
    blockchain_type: <span class="hljs-type">str</span>[<span class="hljs-number">11</span>] = <span class="hljs-string">"monolithic!"</span>,
}

<span class="hljs-keyword">impl</span> <span class="hljs-title class_">Initialization</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Contract</span> {
    <span class="hljs-meta">#[storage(read, write)]</span>
    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">initialize</span>() {
        <span class="hljs-comment">// Sets the state of the contract to be initalized</span>
        <span class="hljs-title function_ invoke__">require</span>(storage.state == State::NotInitialized, InitializationError::CannotReinitialize);
        storage.state = State::Initialized;
    }

    <span class="hljs-meta">#[storage(read, write)]</span>
    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">upgrade_blockchain</span>() {
        <span class="hljs-comment">// Functions ensuring the contract has been initalized</span>
        <span class="hljs-title function_ invoke__">require</span>(storage.state == State::Initialized, InitializationError::ContractNotInitialized);
        storage.blockchain_type = <span class="hljs-string">"**modular**"</span>
    }

    <span class="hljs-meta">#[storage(read)]</span>
    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">blockchain</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">str</span>[<span class="hljs-number">11</span>] {
        storage.blockchain_type
    }
}
</code></pre>
`

export default html
